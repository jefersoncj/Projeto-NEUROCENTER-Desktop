/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.markConsult.gui;

import br.com.markConsult.classesMetodos.ExamesTableModel1;
import br.com.markConsult.classesMetodos.RiscosTableModel1;
import br.com.markConsult.dao.CadPCMSODAO;
import br.com.markConsult.dao.CadPacienteDAO;
import br.com.markConsult.dao.CadPeriodicidadeDAO;
import br.com.markConsult.entidades.Empresa;
import br.com.markConsult.entidades.Exame;
import br.com.markConsult.entidades.Funcao;
import br.com.markConsult.entidades.MinhaEmpresa;
import br.com.markConsult.entidades.OrdemExames;
import br.com.markConsult.entidades.Paciente;
import br.com.markConsult.entidades.Periodicidade;
import br.com.markConsult.entidades.Risco;
import br.com.markConsult.entidades.Sessao;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Jeferson
 */
public class GeraOrdem extends javax.swing.JInternalFrame {
 String data = (new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date(System.currentTimeMillis())));
   
   
    private final RiscosTableModel1 modelRiscos;
    private final ExamesTableModel1 modelExames;
    /**
     * Creates new form GeraPCMSO1
     */
    public GeraOrdem() {
        initComponents();
        modelRiscos = new RiscosTableModel1();
        tabela_riscos.setModel(modelRiscos); 
        
        modelExames =  new ExamesTableModel1();
        tabela_exames.setModel(modelExames);
       
        formaTabela();
        
        tabela_riscos.getSelectionModel().setSelectionInterval(0, 0);
        
  
        jC_paciente.getEditor().addActionListener((ActionEvent e) -> {
            busaPacientes();
            jC_paciente.setSelectedItem(e.getActionCommand().toString());
           
        });             
		jC_paciente.addItemListener((ItemEvent e) -> {
                  
        });
                 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jC_periodicidade = new javax.swing.JComboBox();
        bt_sair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela_riscos = new javax.swing.JTable();
        Ok = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jC_paciente = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        tf_empresa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tf_setor = new javax.swing.JTextField();
        tf_funcao = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabela_exames = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jC_aso = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Ordem para exames");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/markConsult/imagens/help.png"))); // NOI18N

        jLabel6.setText("  Exames");

        jLabel7.setText("Periodicidade:");

        jC_periodicidade.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jC_periodicidadePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        bt_sair.setText("Fechar");
        bt_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sairActionPerformed(evt);
            }
        });

        tabela_riscos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabela_riscos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabela_riscosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela_riscos);

        Ok.setText("GERAR ODRDEM");
        Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkActionPerformed(evt);
            }
        });

        jLabel5.setText("  Riscos");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gera ordem para exames", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jLabel3.setText("Paciente:");

        jC_paciente.setEditable(true);
        jC_paciente.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jC_pacientePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jC_paciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC_pacienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Empresa:");

        tf_empresa.setEditable(false);

        jLabel2.setText("Setor:");

        jLabel4.setText("Função");

        tf_setor.setEditable(false);

        tf_funcao.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jC_paciente, 0, 1, Short.MAX_VALUE)
                    .addComponent(tf_setor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tf_empresa)
                    .addComponent(tf_funcao, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jC_paciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tf_empresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(tf_setor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_funcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        tabela_exames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabela_exames);

        jLabel8.setText("ASO para trabalhao em altura:");

        jC_aso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NÃO", "SIM" }));

        jButton1.setText("Limpar Campos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jC_aso, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Ok, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_sair))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jC_periodicidade, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jC_periodicidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jC_aso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ok)
                    .addComponent(bt_sair)
                    .addComponent(jButton1))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jC_periodicidadePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jC_periodicidadePopupMenuWillBecomeInvisible
        if (jC_paciente.getSelectedIndex() >= 0) {

            CadPCMSODAO dao = new CadPCMSODAO();
            Paciente paciente = (Paciente) jC_paciente.getSelectedItem();
            Empresa emp = paciente.getEmpresa();
            Funcao func = paciente.getFuncao();
            Periodicidade p;
            if (jC_periodicidade.getSelectedItem() != "Todas") {
                p = (Periodicidade) jC_periodicidade.getSelectedItem();
                modelExames.listar(dao.filtraExamePorFuncaoEmpresa(emp, func, p));
            } else {
                modelExames.limpaLista();
            }
        }

    }//GEN-LAST:event_jC_periodicidadePopupMenuWillBecomeInvisible

    private void bt_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sairActionPerformed
        dispose();

    }//GEN-LAST:event_bt_sairActionPerformed

    private void tabela_riscosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabela_riscosMouseClicked
//        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
//
//            dispose();
//        }
//        int s = tabela_riscos.getSelectedRow();
    }//GEN-LAST:event_tabela_riscosMouseClicked

    private void OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkActionPerformed
       Paciente p = new Paciente();
            if (jC_paciente.getSelectedIndex() >= 0) {
                p = (Paciente) jC_paciente.getSelectedItem();
            }
        if (p.getId() == null) {
            JOptionPane.showMessageDialog(null,"Selecione um paciente!");
            return;
            
        }
        
        if (modelExames.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Selecione uma periodicidade!");
            return;
            
        }
        try {
            CadPacienteDAO dao = new CadPacienteDAO();
            
            if (p.getId() != null) { 
            Date dataConve = (Date) converte(data);

            List<Exame> exameSele = modelExames.getListar();
            List<Risco> riscoSele = modelRiscos.getListar();
            int asoSele = jC_aso.getSelectedIndex();
            boolean aso = false;
            if (asoSele != 0) {
                aso =true;
            }
            
            Periodicidade periodicidde = null;
            if (jC_periodicidade.getSelectedItem() != "Todas") {
                periodicidde = (Periodicidade) jC_periodicidade.getSelectedItem();
            }
            OrdemExames gope = new OrdemExames(null,dataConve,p, p.getEmpresa(), aso, periodicidde , riscoSele, exameSele);
           
            int id_ordem =dao.inserirOdemPExame(gope);
            
            int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Deseja imprir a ordem gerada?", "Sistema informa:", JOptionPane.YES_NO_OPTION);
            if (opcao_escolhida == JOptionPane.YES_OPTION) {
            gerarRel(id_ordem);
                 }else{
                JOptionPane.showMessageDialog(null, "Ordem gerada com sucesso!");
            }
            }
        } catch (ParseException ex) {
            Logger.getLogger(GeraOrdem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_OkActionPerformed

    private void jC_pacientePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jC_pacientePopupMenuWillBecomeInvisible
        if (jC_paciente.getSelectedIndex() >= 0) {
            Paciente paciente = (Paciente) jC_paciente.getSelectedItem();
            tf_empresa.setText(paciente.getEmpresa().getFantasia());
            tf_setor.setText(paciente.getSetor().getDescSetor());
            tf_funcao.setText(paciente.getFuncao().getDescFuncao());

            CadPCMSODAO dao = new CadPCMSODAO();
            Empresa emp = paciente.getEmpresa();
            Funcao func = paciente.getFuncao();
            modelRiscos.listar(dao.buscRiscoPorFuncaoEmpresa(emp,func));
            atualizajC_periodicade();
        }else{
            limpaTudo();
        }
    }//GEN-LAST:event_jC_pacientePopupMenuWillBecomeInvisible

    private void jC_pacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_pacienteActionPerformed
        abre();
    }//GEN-LAST:event_jC_pacienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpaTudo();
        jC_paciente.removeAllItems();
        jC_paciente.setPopupVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ok;
    private javax.swing.JButton bt_sair;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jC_aso;
    private javax.swing.JComboBox jC_paciente;
    private javax.swing.JComboBox jC_periodicidade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabela_exames;
    private javax.swing.JTable tabela_riscos;
    private javax.swing.JTextField tf_empresa;
    private javax.swing.JTextField tf_funcao;
    private javax.swing.JTextField tf_setor;
    // End of variables declaration//GEN-END:variables
public final java.util.Date converte(String dataOrdem) throws ParseException {
        DateFormat forma = new SimpleDateFormat("dd/MM/yyyy");
        java.sql.Date dat = new java.sql.Date(forma.parse(dataOrdem).getTime());

        return dat;
    }
   
    
    private void formaTabela(){
        
        
        tabela_riscos.getColumnModel().getColumn(1).setPreferredWidth(150);
        
        tabela_exames.getColumnModel().getColumn(0).setPreferredWidth(10);
        tabela_exames.getColumnModel().getColumn(1).setMaxWidth(100);
      
    }    
    
    public void gerarRel(int id_ordem){
        final Progress p = new Progress();
        p.setVisible(true);
        SwingWorker worker = new SwingWorker(){
            @Override
            protected Object doInBackground() throws Exception {
                     
             CadPacienteDAO dao = new CadPacienteDAO();
            
                MinhaEmpresa me = Sessao.getInstance().getMinhaEmpresa();
             dao.ConectRelatorio(id_ordem,me.getId());
    
                return null;
            }
            @Override
            protected void done() {
                p.setVisible(false);
            }
        };
        worker.execute();
    }
    
    private void atualizajC_periodicade(){
        
        CadPeriodicidadeDAO dao = new CadPeriodicidadeDAO();
        List<Periodicidade> periodicidades = dao.buscaPeriodicidadees("", 'e');
        jC_periodicidade.removeAllItems();
        jC_periodicidade.addItem("Todas");
        for (Periodicidade periodicidade : periodicidades) {
            jC_periodicidade.addItem(periodicidade);
        }
    }
    
    
    private void limpaTudo(){
        tf_empresa.setText("");
        tf_setor.setText("");
        tf_funcao.setText("");
        modelRiscos.limpaLista();
        modelExames.limpaLista();
        jC_periodicidade.removeAllItems();
    }
    
     private void abre(){
        jC_paciente.showPopup();  
    }
    private void busaPacientes(){
       
        Object digito =  jC_paciente.getEditor().getItem();
        jC_paciente.removeAllItems();
        String toUpperCase = digito.toString().toUpperCase();
        
        if (!toUpperCase.equals("")) {
            
        
        CadPacienteDAO dao2 = new CadPacienteDAO();
        List<Paciente> listaPacientes = dao2.buscaPaciente(toUpperCase, 'e');
           
        
           for (Paciente paciente : listaPacientes) {
               
               if (listaPacientes.isEmpty()) {
                   limpaTudo();
               }else{
               
               jC_paciente.addItem(paciente);
               }            
            
        }
        }  
            
            
    }
}
