/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.markConsult.gui;

import br.com.markConsult.Tetes.Utils;
import br.com.markConsult.classesMetodos.ArquivosProcedimentosTableModel;
import br.com.markConsult.classesMetodos.ConsultaProcedimentosTableModel;
import br.com.markConsult.dao.CadConsultasDAO;
import br.com.markConsult.dao.CadImagensPacienteDAO;
import br.com.markConsult.entidades.ArquivosProcedimento;
import br.com.markConsult.entidades.Consulta;
import br.com.markConsult.entidades.ConsultaProcedimento;
import br.com.markConsult.utils.ImagePreview;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Jeferson
 */
public class VerProcedimentosConsulta1 extends javax.swing.JDialog {
    private final Properties confBanco = new Properties();
    private Consulta consulta;
    private ConsultaProcedimentosTableModel modelProcedimento;
    private ArquivosProcedimentosTableModel modelArquivos;
    String data = (new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date(System.currentTimeMillis())));

    /**
     * Creates new form VerProcedimentosConsulta
     *
     * @param parent
     * @param modal
     */
    public VerProcedimentosConsulta1(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        URL url = this.getClass().getResource("/br/com/markConsult/imagens/help.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        modelProcedimento = new ConsultaProcedimentosTableModel();
        modelArquivos = new ArquivosProcedimentosTableModel();
        jTConsultas.setModel(modelProcedimento);
        jTable1.setModel(modelArquivos);
        ajusTabela();

        TableRowSorter<ConsultaProcedimentosTableModel> sorter = new TableRowSorter<>((ConsultaProcedimentosTableModel) jTConsultas.getModel());
        jTConsultas.setRowSorter(sorter);

        JTableHeader header = jTConsultas.getTableHeader();
        header.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                JTable table = ((JTableHeader) e.getSource()).getTable();
                TableColumnModel colModel = table.getColumnModel();
                int vColIndex = colModel.getColumnIndexAtX(e.getX());
                int mColIndex = table.convertColumnIndexToModel(vColIndex);
                if (vColIndex == -1) {
                    return;
                }
                int ordenacao = mColIndex; //criei esta v√°riavel ordenacao;  
            }
        });
        
         try {
            confBanco.load(new FileInputStream("/markconsultas/banco.ini"));
        } catch (IOException ex) {
            Logger.getLogger(Ficha.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);

        Action escapeAction = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTConsultas = new javax.swing.JTable();
        bt_sair = new javax.swing.JButton();
        bt_realizada = new javax.swing.JButton();
        bt_falta = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jl_nomePaciente = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Procedimentos/Exames");

        jTConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTConsultas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTConsultasMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTConsultas);

        bt_sair.setText("Sair");
        bt_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sairActionPerformed(evt);
            }
        });

        bt_realizada.setText("MARCAR COMO REALIZADO");
        bt_realizada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_realizadaActionPerformed(evt);
            }
        });

        bt_falta.setText("MARCAR COMO FALTA");
        bt_falta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_faltaActionPerformed(evt);
            }
        });

        jLabel1.setText("Paciente:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("Adicionar arquivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jl_nomePaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_realizada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_falta)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_sair)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jl_nomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_sair)
                    .addComponent(bt_realizada)
                    .addComponent(bt_falta)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bt_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sairActionPerformed
        dispose();
    }//GEN-LAST:event_bt_sairActionPerformed

    private void bt_realizadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_realizadaActionPerformed
        alteraStatus("REALIZADO");
    }//GEN-LAST:event_bt_realizadaActionPerformed

    private void bt_faltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_faltaActionPerformed
        alteraStatus("FALTA");
    }//GEN-LAST:event_bt_faltaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setDialogTitle("Importar arquivos");
        jfc.setFileFilter(new FileNameExtensionFilter("Arquivos, jpg, gif, png, pdf, xls, xlsm, doc, docx, 3gp, mp4", "jpg", "jpeg", "gif", "png", "pdf", "xls", "xlsm", "doc", "docx", "3gp", "mp4"));
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setMultiSelectionEnabled(true);
        jfc.setAccessory(new ImagePreview(jfc));
        int retorno = jfc.showDialog(jfc, "Importar");

        if (retorno == JFileChooser.APPROVE_OPTION) {
            final Progress p = new Progress();
            p.setVisible(true);
            SwingWorker worker = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    List<File> imgSele = Arrays.asList(jfc.getSelectedFiles());
                    int procedimentoSelecionado = jTConsultas.getSelectedRow();
                    ConsultaProcedimento cp = modelProcedimento.getItem(procedimentoSelecionado);
                    for (File imgSele1 : imgSele) {
                        if (accept(imgSele1)) { 
                            criarDiretorio(imgSele1, cp);
                            buscaArquivos();
                        } else {
                            JOptionPane.showMessageDialog(null, "O arquivo " + imgSele1.getName() + "√© inv√°lido!");
                        }
                    }
                    return null;
                }

                @Override
                protected void done() {

                    p.setVisible(false);
                }
            };
            worker.execute();

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
            if (jTable1.isEnabled()) {
            if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 1) {
                //buscaArquivos();
            } else if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
                abriArquivos();
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int opcao_escolhida = JOptionPane.showConfirmDialog(null, "Excluir o arquivo selecionado?", "Exclus√£o ", JOptionPane.YES_NO_OPTION, 3);
        if (opcao_escolhida == JOptionPane.YES_OPTION) {
            try {
                deletArquivo();
            } catch (IOException ex) {
                Logger.getLogger(Ficha.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTConsultasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTConsultasMousePressed
       buscaArquivos();
    }//GEN-LAST:event_jTConsultasMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerProcedimentosConsulta1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            VerProcedimentosConsulta1 dialog = new VerProcedimentosConsulta1(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_falta;
    private javax.swing.JButton bt_realizada;
    private javax.swing.JButton bt_sair;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTConsultas;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jl_nomePaciente;
    // End of variables declaration//GEN-END:variables
    public final java.util.Date converte(String dataConsul) throws ParseException {
        DateFormat forma = new SimpleDateFormat("dd/MM/yyyy");
        java.sql.Date dat = new java.sql.Date(forma.parse(dataConsul).getTime());

        return dat;
    }
    public void pesquisa() {
        CadConsultasDAO dao = new CadConsultasDAO();
        List<ConsultaProcedimento> procedimentos = dao.BuscaProcedimetoEmpresa("", 'e', this.consulta.getId());
        modelProcedimento.listar(procedimentos);
        ajusTabela();
    }

    private void ajusTabela() {
//        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
//        direita.setHorizontalAlignment(SwingConstants.RIGHT);
//
//        jTConsultas.getColumnModel().getColumn(0).setMinWidth(60);
//        jTConsultas.getColumnModel().getColumn(0).setMaxWidth(60);
    }

    public void setConsulta(Consulta consulta) {
        this.consulta = consulta;
        jl_nomePaciente.setText(consulta.getPaciente().getNome());
        pesquisa();
    }

    private void alteraStatus(String status) {
        CadConsultasDAO dao = new CadConsultasDAO();
        List<ConsultaProcedimento> con = new ArrayList<>();
        modelProcedimento.getProcedimentos().stream().filter((consultaProcedimento) -> (consultaProcedimento.getSelecao())).map((consultaProcedimento) -> {
            consultaProcedimento.setStatus(status);
            return consultaProcedimento;
        }).forEach((consultaProcedimento) -> {
            con.add(consultaProcedimento);
        });
        dao.altStatProcedimento(con);
        pesquisa();
    }

    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }

        String extension = Utils.getExtension(f);
        if (extension != null) {
            if (extension.equals(Utils.gif)
                    || extension.equals(Utils.jpeg)
                    || extension.equals(Utils.jpg)
                    || extension.equals(Utils.png)
                    || extension.equals(Utils.pdf)
                    || extension.equals(Utils.xls)
                    || extension.equals(Utils.xlsm)
                    || extension.equals(Utils.doc)
                    || extension.equals(Utils.docx)
                    || extension.equals(Utils.mp4)
                    || extension.equals(Utils.gp)) {
                return true;
            }
        }

        return false;
    }

    public void criarDiretorio(File file, ConsultaProcedimento cp) {
        try {
            // File arquivo = new File(confBanco.getProperty("ip")+imp.getPaciente().getId()+"/"+imp.getImagem());
            File diretorio = new File(confBanco.getProperty("ip") + cp.getId() + "/");
            String endImgem = diretorio.toString() + "/" + file.getName();
            if (!diretorio.exists()) {
                diretorio.mkdirs();
            }

            salvaImagem(file, 800, 600, endImgem);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar o diretorio");
            System.out.println(ex);
        }
    }

    public void salvaImagem(File file, Integer imgLargura, Integer imgAltura, String endImgem) throws IOException {
        String extencao = Utils.getExtension(file);
        if (extencao.equals("jpg") || extencao.equals("png") || extencao.equals("gif")) {
            BufferedImage imagem = ImageIO.read(file);
            Double novaImgLargura = (double) imagem.getWidth();
            Double novaImgAltura = (double) imagem.getHeight();
            Double imgProporcao;
            if (novaImgLargura >= imgLargura) {
                imgProporcao = (novaImgAltura / novaImgLargura);
                novaImgLargura = (double) imgLargura;
                novaImgAltura = (novaImgLargura * imgProporcao);
                while (novaImgAltura > imgAltura) {
                    novaImgLargura = (double) (--imgLargura);
                    novaImgAltura = (novaImgLargura * imgProporcao);
                }
            } else if (novaImgAltura >= imgAltura) {
                imgProporcao = (novaImgLargura / novaImgAltura);
                novaImgAltura = (double) imgAltura;
                while (novaImgLargura > imgLargura) {
                    novaImgAltura = (double) (--imgAltura);
                    novaImgLargura = (novaImgAltura * imgProporcao);
                }
            }
            BufferedImage novaImagem = new BufferedImage(novaImgLargura.intValue(), novaImgAltura.intValue(), BufferedImage.TYPE_INT_RGB);
            Graphics g = novaImagem.getGraphics();
            g.drawImage(imagem.getScaledInstance(novaImgLargura.intValue(), novaImgAltura.intValue(), 10000), 0, 0, null);
            g.dispose();

            ImageIO.write(novaImagem, Utils.getExtension(file), new File(endImgem));
            salvarDadoArquivo(file.getName());
        } else {
            try {
                if (endImgem != null) {
                    if (Files.exists(new File(endImgem).toPath())) {
                        int opcao_escolhida = JOptionPane.showConfirmDialog(null,
                                "Na pasta j√° existe um arquivo " + "\"" + file.getName() + "\"" + " desaja substitui-lo?", "Importar",
                                JOptionPane.YES_NO_OPTION);
                        if (opcao_escolhida == JOptionPane.YES_OPTION) {
                            Files.delete(new File(endImgem).toPath());
                            Files.copy(file.toPath(),
                                    Paths.get(endImgem));
                            salvarDadoArquivo(file.getName());
                        }
                    } else {
                        Files.copy(file.toPath(),
                                Paths.get(endImgem));
                        salvarDadoArquivo(file.getName());
                    }
                }
            } catch (IOException ex) {
                //Logger.getLogger(CadMinhaEmpresa.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void salvarDadoArquivo(String nomeArquivo) {
        Date dt = null;
        try {
            dt = (Date) converte(data);
        } catch (ParseException ex) {
            Logger.getLogger(CadConsultaModal.class.getName()).log(Level.SEVERE, null, ex);
        }

        CadImagensPacienteDAO dao = new CadImagensPacienteDAO();
        
        int procedimentoSelecionado = jTConsultas.getSelectedRow();
            ConsultaProcedimento cp = modelProcedimento.getItem(procedimentoSelecionado);
        ArquivosProcedimento imp = new ArquivosProcedimento(null, cp, dt, "", nomeArquivo);
        dao.inserirArquivoProcedimento(imp);
    }
    
        private void buscaArquivos() {
              int procedimentoSelecionado = jTConsultas.getSelectedRow();
              if (procedimentoSelecionado >= 0) {
                  ConsultaProcedimento cp = modelProcedimento.getItem(procedimentoSelecionado);
                  CadImagensPacienteDAO dao = new CadImagensPacienteDAO();
                 modelArquivos.listar( dao.buscaArquivosProcedimento(cp));
            }
          
            
//        if (jC_albuns.getSelectedIndex() != 0 && jC_albuns.getSelectedItem() != null) {
//            CadImagensPacienteDAO dao = new CadImagensPacienteDAO();
//            Album a = (Album) jC_albuns.getSelectedItem();
//            List<ArquivosPaciente> lp = dao.buscaImagensPaciente(a);
//            mostraImagens(lp);
//        } else {
//            model3.limpaLista();
//            jL_imagem.setIcon(null);
//        }

    }
        
        private void abriArquivos() {
        try {
            int sele = jTable1.getSelectedRow();
            if (sele < 0) {
                return;
            }

            ArquivosProcedimento imp = modelArquivos.getItem(sele);
            File arquivo = new File(confBanco.getProperty("ip") + imp.getConsultaProcedimento().getId() + "/" + imp.getArquivo());
            if(Files.exists(arquivo.toPath())){
                java.awt.Desktop.getDesktop().open(arquivo.getAbsoluteFile());
            }else{
                JOptionPane.showMessageDialog(null, "Arquivo n√£o encontrado");
            }
           
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro abrindo arquivo");
        }
    }
        
      private void deletArquivo() throws IOException {
        int sele = jTable1.getSelectedRow();
        if (sele < 0) {
            return;
        }
        ArquivosProcedimento imp = modelArquivos.getItem(sele);
        File arquivo = new File(confBanco.getProperty("ip") + imp.getConsultaProcedimento().getId() + "/" + imp.getArquivo());
        Files.deleteIfExists(arquivo.toPath()); //arquivo.delete();
        CadImagensPacienteDAO dao = new CadImagensPacienteDAO();
        dao.rmArquivoProcedimento(imp.getId());
        buscaArquivos();
    }
}
